name: CI/CD Pipeline - Lending Management Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: lendinguniv/lending-service
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Tests et couverture de code
  test:
    name: Tests Unitaires et Couverture
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lending_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django pytest-cov
    
    - name: Run migrations
      env:
        DATABASE_ENGINE: django.db.backends.postgresql
        DATABASE_NAME: lending_test
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DJANGO_SECRET_KEY: test-secret-key
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      env:
        DATABASE_ENGINE: django.db.backends.postgresql
        DATABASE_NAME: lending_test
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DJANGO_SECRET_KEY: test-secret-key
        BOOK_MANAGEMENT_URL: http://mock-book-service:8001
        USER_MANAGEMENT_URL: http://mock-user-service:8002
        NOTIFICATION_SERVICE_URL: http://mock-notification-service:8003
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if [ "$COVERAGE" -lt 70 ]; then
          echo "❌ Coverage is ${COVERAGE}%, below required 70%"
          exit 1
        else
          echo "✅ Coverage is ${COVERAGE}%, above required 70%"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: lending-service-coverage

  # Job 2: Analyse de sécurité et qualité
  security:
    name: Analyse Sécurité et Qualité
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: safety check -r requirements.txt
    
    - name: Run bandit security analysis
      run: bandit -r . -x ./venv,./env,./tests
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 3: Build et push de l'image Docker
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Déploiement (optionnel, selon environnement)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
    
    - name: Deploy to Kubernetes
      run: |
        # Mettre à jour l'image dans le deployment
        sed -i "s|lending-service:latest|${{ env.DOCKER_IMAGE }}:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Appliquer les manifestes
        kubectl apply -f k8s/
        
        # Attendre le déploiement
        kubectl rollout status deployment/lending-service -n library-system --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Tester les endpoints principaux
        SERVICE_URL=$(kubectl get service lending-service -n library-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$SERVICE_URL:8000/health/ || exit 1
        echo "✅ Service déployé avec succès!"