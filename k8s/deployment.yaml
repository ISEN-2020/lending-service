apiVersion: apps/v1
kind: Deployment
metadata:
  name: lending-service
  namespace: library-system
  labels:
    app: lending-service
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: lending-service
  template:
    metadata:
      labels:
        app: lending-service
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: lending-service-sa
      automountServiceAccountToken: false
      containers:
      - name: lending-service 
        image: lending-service:v1.0.0  # Version spécifique au lieu de 'latest'
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        
        # Variables d'environnement depuis ConfigMap
        envFrom:
        - configMapRef:
            name: lending-service-config
        
        # Variables d'environnement depuis Secret
        env:
        - name: DJANGO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: lending-service-secret
              key: DJANGO_SECRET_KEY
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: lending-service-secret
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lending-service-secret
              key: DATABASE_PASSWORD
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health/
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        
        # Ressources
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Sécurité
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      # Configuration du pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # Affectation aux nœuds (optionnel)
      nodeSelector:
        node-type: worker
      
      # Anti-affinity pour éviter de placer tous les pods sur le même nœud
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - lending-service
              topologyKey: kubernetes.io/hostname